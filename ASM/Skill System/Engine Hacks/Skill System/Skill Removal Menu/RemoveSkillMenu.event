#ifndef HAX_REMOVE_SKILL_MENU
#define HAX_REMOVE_SKILL_MENU

// I'm sorry this took this long

// Things to know:
/*
	I changed the skill adding routine to set the short at 0202BCDE to (0x8000 | SkillID) when trying to learn a skill but the unit ran out of slots.
	
	Routines that are "public"/usable to the outside:
	
	(ASMC_LearnNewSkill+1)
		call through events with ASMC. Will learn to the unit defined by slot 2 the skill of index in slot 1
		Ex:
			SVAL 1 NiceThighsID
			SVAL 2 (-1) // (-1) is active unit
			ASMC (ASMC_LearnNewSkill+1)
	
	(ASMC_HasSkill+1)
		kinda bonus, checks if unit in slot 2 has skill in slot 1 (result is stored in slot C as by convention). Best used in conjonction with the above ASMC, but may also have uses in other cases?

	(prLearnNewSkill+1)
		Arguments: r0 = Unit, r1 = Skill Index, r2 = Parent 6C
		Returns:   r0 = 6C (if you really need it)
		Learns given skill to active unit, and displays popup & menu accordingly. Meant to work with things like skill learning through items or something.
	
	(prCheckForSkillForgetting+1)
		Arguments: r0 = Unit, r1 = Parent 6C
		Returns:   r0 = 0 on success (menu is open and all)
		Will check if the top bit of short at 0202BCDE is set, and if set, will call (prCallRemoveSkillMenu+1).
	
	(prCallSkillLearnedPopup+1)
		Arguments: r0 = Parent 6C
		Returns:   r0 = 0 on success (skill is displayed and all)
		This one is kinda bonus too, since it doesn't have much todo with the menu itself. Calls a popup that displays "Learned <skill>", with skill being the one at 0202BCDE. It is suitable for use with _6C_CALL_ROUTINE_2 (return values match).
	
	(prCallRemoveSkillMenu+1)
		Arguments: r0 = Unit, r1 = Parent 6C (can be 0)
		Returns:   nothing
		Will create the skill forgetting menu for given unit, and new skill id located at byte 0202BCDE.
	
*/

#include "Extensions/6CDefinitions.txt"

{

// Battle 6C Hook
PUSH; ORG 0x59DB04
	_6C_JUMP(_pProcFromBattleProc)
	_6C_END
POP

// Arena 6C Hook
PUSH; ORG 0x59DB54
	_6C_JUMP(_pProcFromArenaProc)
	_6C_END
POP

// Misc Action (Steal, Dance, Staff, etc) 6C Hook
PUSH; ORG 0x59BAC4
	_6C_JUMP(_pProcFromMiscActionProc)
	_6C_END
POP

// Promotion 6C Hook (unused since no skill learning on promotion)
// PUSH; ORG 0xB126FC
	// _6C_JUMP(_p6CFromPromotion6C)
// POP

ALIGN 4
_pProcFromBattleProc:
	_6C_CALL_ROUTINE_2(_prCheckForBattleSkillForgetting+1)
	_6C_CALL_ROUTINE_2(0x0328D0+1) // Handles Item Drop
	_6C_CALL_ROUTINE(0x03286C+1) // idk
	_6C_YIELD
	_6C_END

ALIGN 4
_pProcFromArenaProc:
	_6C_CALL_ROUTINE_2(_prCheckForBattleSkillForgetting+1)
	_6C_CALL_ROUTINE(0x0329A0+1) // idk
	_6C_YIELD
	_6C_END

ALIGN 4
_pProcFromMiscActionProc:
	_6C_SLEEP(1)
	_6C_CALL_ROUTINE(0x02CC1C+1) // SaveInstigatorFromBattle
	_6C_CALL_ROUTINE_2(_prCheckForBattleSkillForgetting+1)
	_6C_YIELD
	_6C_END

// ALIGN 4
// _p6CFromPromotion6C:
	// _6C_CALL_ROUTINE_2(prCheckForSkillForgetting+1)
	// _6C_END

ALIGN 4
_prCheckForBattleSkillForgetting:
	#incbin "asm/CheckForBattleSkillForgetting.bin"
	POIN (prCheckForSkillForgetting+1)

}

ALIGN 4
ASMC_LearnNewSkill:
	#incbin "asm/ASMC/ASMC_LearnSkill.bin"
	POIN (prLearnNewSkill+1)

ALIGN 4
ASMC_HasSkill:
	#incbin "asm/ASMC/ASMC_HasSkill.bin"
	POIN (SkillTester+1)

ALIGN 4
prLearnNewSkill:
// Arguments: r0 = Unit, r1 = Skill Index, r2 = Parent 6C
// Returns:   r0 = 6C (if you really need it)
{
	#incbin "asm/LearnNewSkill.bin"
	POIN p6C_NewSkillLearn
	POIN (SkillAdder+1)

p6C_NewSkillLearn:
	_6C_SET_NAME(_psName)
	_6C_CALL_ROUTINE_2(prCallSkillLearnedPopup+1)
	_6C_CALL_ROUTINE_2(_prCheckForget+1)
	_6C_END
	
_psName:
	String(SS_LearnNewSkill)
	BYTE 0; ALIGN 4

_prCheckForget:
	#incbin "asm/LearnNewSkill_CheckForget.bin"
	POIN (prCheckForSkillForgetting+1)
}

ALIGN 4
prCallSkillLearnedPopup:
// Arguments: r0 = Parent 6C
// Returns:   r0 = 0 on success (skill is displayed and all)
{
	#incbin "asm/CallSkillLearnedPopup.bin"
	POIN _pPopupDef
	WORD 90 // time (in frames) the popup stays up (I think if you put -1 it will wait for user input)

ALIGN 4
_pPopupDef: // Copied from the one in Internals
	WORD 0x0C 0x5A // sound played is 5A
	WORD 0x06 LearnedSkillText // text by id
	WORD 0x0D 0x00 // run skill icon routine
	WORD 0x06 0x01
	WORD 0x00 0x00
}

ALIGN 4
prCheckForSkillForgetting:
// Arguments: r0 = Unit, r1 = Parent 6C
// Returns:   r0 = 0 on success (menu is open and all)
	#incbin "asm/CheckForSkillForgetting.bin"
	POIN (prCallRemoveSkillMenu+1)

ALIGN 4
prCallRemoveSkillMenu:
// Arguments: r0 = Unit, r1 = Parent 6C (can be 0)
// Returns:   nothing
{
	#incbin "asm/CallMenuRemoveSkill.bin"
	POIN pMenuDef_RemoveSkill
	POIN p6CMenuWrapper

ALIGN 4
p6CMenuWrapper: // using a whole 6C for storing the unit struct
	_6C_YIELD // To prevent ending the 6C immediately (allowing to block it with a menu child)
	_6C_END   // End immediately after getting control back

ALIGN 4
pMenuDef_RemoveSkill:
	BYTE 1 1 0xE 0 // x, y, w, h
	WORD 0         // style
	POIN pCommandDefs_RemoveSkill
	WORD 0
	WORD 0
	WORD 0
	POIN (prMenuRemoveSkill_OnCancel+1)
	WORD 0
	WORD 0

// Usability, Draw, Effect
#define MenuCommand_UDE(aprUsability, aprDraw, aprEffect) "WORD 0; SHORT 0 0; BYTE 0 0; SHORT 0; POIN ((aprUsability)+1) ((aprDraw)+1) ((aprEffect)+1); WORD 0 0 0"

ALIGN 4
pCommandDefs_RemoveSkill:
	MenuCommand_UDE(prMenuRemoveSkillCommand_Usability, prMenuRemoveSkillCommand_Draw, prMenuRemoveSkillCommand_NoEffect)
	MenuCommand_UDE(prMenuRemoveSkillCommand_Usability, prMenuRemoveSkillCommand_Draw, prMenuRemoveSkillCommand_NoEffect)
	MenuCommand_UDE(prMenuRemoveSkillCommand_Usability, prMenuRemoveSkillCommand_Draw, prMenuRemoveSkillCommand_ForgetEffect)
	MenuCommand_UDE(prMenuRemoveSkillCommand_Usability, prMenuRemoveSkillCommand_Draw, prMenuRemoveSkillCommand_ForgetEffect)
	MenuCommand_UDE(prMenuRemoveSkillCommand_Usability, prMenuRemoveSkillCommand_Draw, prMenuRemoveSkillCommand_ForgetEffect)
	MenuCommand_UDE(prMenuRemoveSkillCommand_Usability, prMenuRemoveSkillCommand_Draw, prMenuRemoveSkillCommand_ForgetEffect)
	MenuCommand_UDE(prMenuRemoveSkillCommand_Usability, prMenuRemoveSkillCommand_Draw, prMenuRemoveSkillCommand_NoLearnEffect)
UM_Separator

ALIGN 4
prMenuRemoveSkill_OnCancel:
	#incbin "asm/Menu/MenuRemoveSkill_OnCancel.bin"

ALIGN 4
prMenuRemoveSkillCommand_Usability:
	#incbin "asm/Menu/MenuRemoveSkillCommand_Usability.bin"
	POIN (prGetSkillIdByIndex+1)

ALIGN 4
prMenuRemoveSkillCommand_ForgetEffect:
	#incbin "asm/Menu/MenuRemoveSkillCommand_ForgetEffect.bin"

ALIGN 4
prMenuRemoveSkillCommand_NoLearnEffect:
	#incbin "asm/Menu/MenuRemoveSkillCommand_NoLearnEffect.bin"

ALIGN 4
prMenuRemoveSkillCommand_NoEffect:
	#incbin "asm/Menu/MenuRemoveSkillCommand_NoEffect.bin"

ALIGN 4
prMenuRemoveSkillCommand_Draw:
	#incbin "asm/Menu/MenuRemoveSkillCommand_Draw.bin"
	POIN (prDrawSkillMenuCommand+1)
	POIN (prGetSkillIdByIndex+1)

ALIGN 4
prDrawSkillMenuCommand:
	#incbin "asm/DrawSkillMenuCommand.bin"
	POIN SkillDescTable

ALIGN 4
prGetSkillIdByIndex:
	#incbin "asm/GetSkillIdByIndex.bin"
	POIN PersonalSkillTable
	POIN ClassSkillTable

}

#endif // HAX_REMOVE_SKILL_MENU
