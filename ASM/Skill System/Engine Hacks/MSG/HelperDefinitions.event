#ifndef MSG_HELPER_DEFINITIONS_EVENT
#define MSG_HELPER_DEFINITIONS_EVENT

#include "eastdlib.event"
#include "Extensions/Hack Installation.txt"

#ifndef _FE8_
	ERROR _file_ should be assembled for FE8
#endif // _FE8_

#include "CoreDefinitions.event"

//don't know where else to place this
#define _testSkill(skillid,addnmbr,subnmbr) "SHORT 0xB530 0x1C04 0x1C0D 0x1C28 0x2100+skillid 0x4B05 0x469E 0xF800 0x2800 0xD001 0x3400+addnmbr 0x3C00+subnmbr 0x1C20 0x1C29 0xBD30 0x0000; POIN SkillTester"

#define prGetItemIdROMStruct 0x080177B0

#define prGetItemHPBonus     0x080163F0
#define prGetItemPowBonus    0x08016420
#define prGetItemSklBonus    0x08016450
#define prGetItemSpdBonus    0x08016480
#define prGetItemDefBonus    0x080164B0
#define prGetItemResBonus    0x080164E0
#define prGetItemLckBonus    0x08016510

#define prGetUnitEquipped  0x08016B28

#define rBSCModifyAttack "SHORT 0xB510 0x1C04 0x2000 0x5A20 0xF000 0xF806 0x2100 0x5260 0x1C20 0xBC10 0xBC02 0x4708"
#define rBSCModifyDefense "SHORT 0xB510 0x1C04 0x2002 0x5A20 0xF000 0xF806 0x2102 0x5260 0x1C20 0xBC10 0xBC02 0x4708"
#define rBSCModifyHit "SHORT 0xB510 0x1C04 0x2004 0x5A20 0xF000 0xF806 0x2104 0x5260 0x1C20 0xBC10 0xBC02 0x4708"
#define rBSCModifyAvoid "SHORT 0xB510 0x1C04 0x2006 0x5A20 0xF000 0xF806 0x2106 0x5260 0x1C20 0xBC10 0xBC02 0x4708"
#define rBSCModifyCrit "SHORT 0xB510 0x1C04 0x2008 0x5A20 0xF000 0xF806 0x2108 0x5260 0x1C20 0xBC10 0xBC02 0x4708"
#define rBSCModifyDodge "SHORT 0xB510 0x1C04 0x200A 0x5A20 0xF000 0xF806 0x210A 0x5260 0x1C20 0xBC10 0xBC02 0x4708"
#define rBSCModifyAS "SHORT 0xB510 0x1C04 0x200C 0x5A20 0xF000 0xF806 0x210C 0x5260 0x1C20 0xBC10 0xBC02 0x4708"
#define rBSCModifyLethality "SHORT 0xB510 0x1C04 0x200E 0x5A20 0xF000 0xF806 0x210E 0x5260 0x1C20 0xBC10 0xBC02 0x4708"

#define rArgument "SHORT 0x1C10 0x4770"
#define rCurrent "SHORT 0x4770 0x46C0"
#define rForWordAt(aOffset) "SHORT 0x4B01 0x58C9 0xE002 0x46C0; WORD aOffset"
#define rForShortAt(aOffset) "SHORT 0x4B01 0x5AC9 0xE002 0x46C0; WORD aOffset"
#define rForByteAt(aOffset) "SHORT 0x4B01 0x5CC9 0xE002 0x46C0; WORD aOffset"
#define rForConstant(aValue) "SHORT 0x4900 0xE001; WORD aValue"
#define rForResultOf(aprRoutine) "SHORT 0xB570 0x4B09 0x2401 0x4063 0x46A6 0x1C04 0x1C0D 0x1C16 0x44FE 0x4718 0x1C03 0x1C20 0x1C29 0x1C32 0x1C19 0xBC70 0xBC08 0x469E 0xE002 0x46C0; POIN aprRoutine"
#define rForResultOfExt(aprRoutine) "SHORT 0xB570 0x4B0A 0x2401 0x4063 0x46A6 0x1C04 0x1C0D 0x1C16 0x1C08 0x1C11 0x44FE 0x4718 0x1C03 0x1C20 0x1C29 0x1C32 0x1C19 0xBC70 0xBC08 0x469E 0xE002 0x46C0; POIN aprRoutine"
#define rForArgument "SHORT 0x1C11 0x46C0"
#define rWithWordAt(aOffset) "SHORT 0x4B01 0x58CA 0xE002 0x46C0; WORD aOffset"
#define rWithUShortAt(aOffset) "SHORT 0x4B01 0x5ACA 0xE002 0x46C0; WORD aOffset"
#define rWithSShortAt(aOffset) "SHORT 0x4B01 0x5ECA 0xE002 0x46C0; WORD aOffset"
#define rWithUByteAt(aOffset) "SHORT 0x4B01 0x5CCA 0xE002 0x46C0; WORD aOffset"
#define rWithSByteAt(aOffset) "SHORT 0x4B01 0x56CA 0xE002 0x46C0; WORD aOffset"
#define rWithConstant(aValue) "SHORT 0x4A00 0xE001; WORD aValue"
#define rWithResultOf(aprRoutine) "SHORT 0xB570 0x4B09 0x2401 0x4063 0x46A6 0x1C04 0x1C0D 0x1C16 0x44FE 0x4718 0x1C03 0x1C20 0x1C29 0x1C32 0x1C1A 0xBC70 0xBC08 0x469E 0xE002 0x46C0; POIN aprRoutine"
#define rWithResultOfExt(aprRoutine) "SHORT 0xB570 0x4B0A 0x2401 0x4063 0x46A6 0x1C04 0x1C0D 0x1C16 0x1C08 0x1C11 0x44FE 0x4718 0x1C03 0x1C20 0x1C29 0x1C32 0x1C1A 0xBC70 0xBC08 0x469E 0xE002 0x46C0; POIN aprRoutine"
#define rWithSubject "SHORT 0x1C0A 0x46C0"
#define rForEachUnitInRange(aMinR, aMaxR) "rWithConstant((aMinR | (aMaxR<<16))); SHORT 0xB5F0 0xB081 0x2400 0x9400 0x1C06 0x1C0F 0x1C15 0x4B23 0x469E 0xF800 0x042A 0x1412 0x142B 0x2010 0x5638 0x2111 0x5679 0x4C1F 0x46A6 0xF800 0x4818 0x2502 0x5F45 0x3D01 0x2D00 0xDB1E 0x4815 0x2400 0x5F04 0x3C01 0x2C00 0xDBF6 0x00A9 0x4813 0x6800 0x1840 0x6800 0x1900 0x7800 0x2800 0xD0F3 0x4810 0x6800 0x1840 0x6800 0x1900 0x7800 0x2800 0xD0EB 0x4B0D 0x469E 0xF800 0x2800 0xD0E6 0xB081 0x9000 0xE7E3 0x1C30 0x9900 0xB001 0x2900 0xD003 0x1C3A 0xF000 0xF811 0xE7F7 0xBCF0 0xBC02 0x4708 0x0000 0xE4D4 0x0202 0xE4E4 0x0202 0xE4D8 0x0202 0x9430 0x0801; POIN prRangeClear prRangeAddFromRange"
#define rForEachUnitInRangeTemplate(apTmpl) "rWithConstant((apTmpl | 0x8000000)); SHORT 0xB5F0 0xB081 0x2400 0x9400 0x1C06 0x1C0F 0x1C15 0x4B21 0x469E 0xF800 0x2010 0x5638 0x2111 0x5679 0x1C2A 0x4B1E 0x469E 0xF800 0x4817 0x2502 0x5F45 0x3D01 0x2D00 0xDB1D 0x4814 0x2400 0x5F04 0x3C01 0xDBF7 0x00A9 0x4812 0x6800 0x1840 0x6800 0x1900 0x7800 0x2800 0xD0F4 0x480F 0x6800 0x1840 0x6800 0x1900 0x7800 0x2800 0xD0EC 0x4B0C 0x469E 0xF800 0x2800 0xD0E7 0xB081 0x9000 0xE7E4 0x1C30 0x9900 0xB001 0x2900 0xD003 0x1C3A 0xF000 0xF810 0xE7F7 0xBCF0 0xBC02 0x4708 0xE4D4 0x0202 0xE4E4 0x0202 0xE4D8 0x0202 0x9430 0x0801; POIN prRangeClear prRangeAddFromTemplate"
#define rForEachUnitItem "SHORT 0xB570 0x1C06 0x1C0C 0x2500 0x1C20 0x4B09 0x469E 0xF800 0x4070 0x4046 0x4070 0x42B5 0xD007 0x006A 0x321E 0x5AA2 0x1C21 0xF000 0xF807 0x3501 0xE7F5 0xBC70 0xBC02 0x4708 0x79D8 0x0801"
#define rCallOther(aprRoutine) "SHORT 0xB530 0x2501 0x4C03 0x406C 0x46AE 0x44FE 0x4720 0xBC30 0xBC02 0x4708; POIN aprRoutine"
#define rCallExternal(aprRoutine) "SHORT 0x1C08 0x1C11 0x4B01 0x2201 0x4053 0x4718; POIN aprRoutine"
#define rCallResultOf "SHORT 0xB5F0 0x1C05 0x1C0E 0x1C17 0xF000 0xF80C 0x1C04 0x1C28 0x1C31 0x1C3A 0x2301 0x469E 0x44FE 0x4720 0xBCF0 0xBC02 0x4708 0x46C0"
#define rCallExternalResultOf "SHORT 0xB530 0x1C0C 0x1C15 0xF000 0xF80B 0x1C02 0x1C20 0x1C29 0x2301 0x469E 0x44FE 0x4710 0xBC30 0xBC02 0x4708 0x46C0"
#define rCallSequence(aprlRoutineSequence) "SHORT 0xB500 0x4B03 0x469E 0xA303 0xF800 0xBC02 0x4708 0x46C0; POIN prCallSequence aprlRoutineSequence; WORD 0"
#define rIf(aprRoutine) "SHORT 0xB570 0x2401 0x46A6 0x4B09 0x4063 0x1C04 0x1C0D 0x1C16 0x44FE 0x4718 0x4044 0x4060 0x4044 0xD003 0x1C29 0x1C32 0xF000 0xF806 0xBC70 0xBC08 0x4718 0x46C0; POIN aprRoutine"
#define rIfNot(aprRoutine) "SHORT 0xB570 0x2401 0x46A6 0x4B09 0x4063 0x1C04 0x1C0D 0x1C16 0x44FE 0x4718 0x4044 0x4060 0x4044 0xD103 0x1C29 0x1C32 0xF000 0xF806 0xBC70 0xBC08 0x4718 0x46C0; POIN aprRoutine"
#define rWhile(aprRoutine) "SHORT 0xB5F0 0x1C04 0x1C0D 0x2701 0x4E08 0x407E 0x447F 0xE007 0x4044 0x4060 0x4044 0xD005 0x1C29 0xF000 0xF809 0x1C04 0x46BE 0x4730 0xBCF0 0xBC02 0x4708 0x46C0; POIN aprRoutine"
#define rWhileNot(aprRoutine) "SHORT 0xB5F0 0x1C04 0x1C0D 0x2701 0x4E08 0x407E 0x447F 0xE007 0x4044 0x4060 0x4044 0xD105 0x1C29 0xF000 0xF809 0x1C04 0x46BE 0x4730 0xBCF0 0xBC02 0x4708 0x46C0; POIN aprRoutine"
#define rAdd "SHORT 0xB510 0x1C04 0xF000 0xF804 0x1820 0xBC10 0xBC02 0x4708"
#define rSub "SHORT 0xB510 0x1C04 0xF000 0xF804 0x1A20 0xBC10 0xBC02 0x4708"
#define rLShift "SHORT 0xB510 0x1C04 0xF000 0xF806 0x4084 0x1C20 0xBC10 0xBC02 0x4708 0x46C0"
#define rRShift "SHORT 0xB510 0x1C04 0xF000 0xF806 0x4104 0x1C20 0xBC10 0xBC02 0x4708 0x46C0"
#define rMul "SHORT 0xB510 0x1C04 0xF000 0xF804 0x4360 0xBC10 0xBC02 0x4708"
#define rAnd "SHORT 0xB510 0x1C04 0xF000 0xF804 0x4020 0xBC10 0xBC02 0x4708"
#define rOr "SHORT 0xB510 0x1C04 0xF000 0xF804 0x4320 0xBC10 0xBC02 0x4708"
#define rXOr "SHORT 0xB510 0x1C04 0xF000 0xF804 0x4060 0xBC10 0xBC02 0x4708"
#define rNot "SHORT 0xB500 0xF000 0xF803 0x43C0 0xBC02 0x4708"
#define rMinus "SHORT 0xB500 0xF000 0xF803 0x4240 0xBC02 0x4708"
#define rUpperHalfByteOf "SHORT 0xB500 0xF000 0xF805 0x0900 0x230F 0x4018 0xBC02 0x4708"
#define rLowerHalfByteOf "SHORT 0xB500 0xF000 0xF805 0x230F 0x4018 0xBC02 0x4708 0x46C0"
#define rBSCAddUnitsSupportBonuses(aSupportLevel) "SHORT 0xB530 0xB082 0x2300 0x9300 0x9301 0x1C04 0x1C15 0x6809 0x7A49 0x2900 0xD004 0x4668 0x4A18 0x4B17 0x469E 0xF800 0x6829 0x7A49 0x2900 0xD004 0x4668 0x4A14 0x4B12 0x469E 0xF800 0x466D 0x7869 0x1049 0x8820 0x1840 0x8020 0x78A9 0x1049 0x8860 0x1840 0x8060 0x78E9 0x1049 0x88A0 0x1840 0x80A0 0x7929 0x1049 0x88E0 0x1840 0x80E0 0x7969 0x1049 0x8920 0x1840 0x8120 0x79A9 0x1049 0x8960 0x1840 0x8160 0xB002 0xBC30 0xBC02 0x4708 0x8550 0x0802; WORD aSupportLevel"

// Unit State Flags (Thanks Teq for the Doq)
#define US_RESCUING     0x00000010
#define US_RESCUED      0x00000020
#define US_CANTOING     0x00000040
#define US_UNDERROOF    0x00000080
#define US_INBALLISTA   0x00000800
#define US_DROPLASTITEM 0x00001000
#define US_GROWTHBONUS  0x00002000
#define US_TEQ_CAPTURE  0x40000000

// Unit Allegience
#define UA_BLUE  0x00
#define UA_GREEN 0x40
#define UA_RED   0x80

// Unit Struct Offsets (Again, thanks Doq)
#define UNIT_ROMCHAR    0x00 // Word, pointer
#define UNIT_ROMCLASS   0x04 // Word, pointer
#define UNIT_LEVEL      0x08 // UByte
#define UNIT_EXP        0x09 // UByte
#define UNIT_INDEX      0x0B // UByte, and to 0x0C to get allegience
#define UNIT_STATE      0x0C // Word, bitfield
#define UNIT_POS_X      0x10 // SByte
#define UNIT_POS_Y      0x11 // SByte
#define UNIT_MAXHP      0x12 // SByte
#define UNIT_CURHP      0x13 // SByte
#define UNIT_POWER      0x14 // SByte
#define UNIT_SKILL      0x15 // SByte
#define UNIT_SPEED      0x16 // SByte
#define UNIT_DEFENSE    0x17 // SByte
#define UNIT_RESISTANCE 0x18 // SByte
#define UNIT_LUCK       0x19 // SByte
#define UNIT_CON_BONUS  0x1A // SByte
#define UNIT_RESCUEEID  0x1B // UByte, see UNIT_INDEX
#define UNIT_BALLISTAID 0x1C // UByte
#define UNIT_MOV_BONUS  0x1D // SByte
#define UNIT_ITEM1      0x1E // UShort
#define UNIT_ITEM2      0x20 // UShort
#define UNIT_ITEM3      0x22 // UShort
#define UNIT_ITEM4      0x24 // UShort
#define UNIT_ITEM5      0x26 // UShort
// etc... Nobody cares for anymore anyway

// Stat Indexes in standard stat arrays
#define STAT_HP         0x00
#define STAT_POWER      0x01
#define STAT_SKILL      0x02
#define STAT_SPEED      0x03
#define STAT_DEFENSE    0x04
#define STAT_RESISTANCE 0x05
#define STAT_LUCK       0x06
#define STAT_CON        0x07
#define STAT_MOV        0x08

// Class/Char Attribute Flags (comes straight from BOOTS)
#define CA_NONE                  0x00000000
#define CA_MOUNTEDAID            0x00000001
#define CA_CANTO                 0x00000002
#define CA_STEAL                 0x00000004
#define CA_LOCKPICK              0x00000008
#define CA_DANCE                 0x00000010
#define CA_PLAY                  0x00000020
#define CA_CRITBONUS             0x00000040
#define CA_BALLISTAE             0x00000080
#define CA_PROMOTED              0x00000100
#define CA_SUPPLY                0x00000200
#define CA_MOUNTED               0x00000400
#define CA_WYVERN                0x00000800
#define CA_PEGASUS               0x00001000
#define CA_LORD                  0x00002000
#define CA_FEMALE                0x00004000
#define CA_BOSS                  0x00008000
#define CA_LOCK_1                0x00010000
#define CA_LOCK_2                0x00020000
#define CA_LOCK_3                0x00040000
#define CA_MAXLEVEL10            0x00080000
#define CA_UNSELECTABLE          0x00100000
#define CA_TRIANGLEATTACK_PEGASI 0x00200000
#define CA_TRIANGLEATTACK_ARMORS 0x00400000
#define CA_LETHALITY             0x02000000
#define CA_SUMMON                0x08000000
#define CA_LOCK_4                0x10000000
#define CA_LOCK_5                0x20000000
#define CA_LOCK_6                0x40000000
#define CA_LOCK_7                0x80000000

#define rForWordAt(aOffset, arNext)  "rForWordAt(aOffset);  arNext"
#define rForShortAt(aOffset, arNext) "rForShortAt(aOffset); arNext"
#define rForByteAt(aOffset, arNext)  "rForByteAt(aOffset);  arNext"
#define rForConstant(aValue, arNext) "rForConstant(aValue); arNext"
#define rForArgument(arNext)         "rForArgument;         arNext"

#define rForResultOf(aprRoutine, arNext)    "rForResultOf(aprRoutine);    arNext"
#define rForResultOfExt(aprRoutine, arNext) "rForResultOfExt(aprRoutine); arNext"

#define rForEachUnitInRange(aRangeMin, aRangeMax, arNext) "rForEachUnitInRange(aRangeMin, aRangeMax); arNext"
#define rForEachUnitItem(arNext)                          "rForEachUnitItem; arNext"

#define rWithWordAt(aOffset, arNext)   "rWithWordAt(aOffset);   arNext"
#define rWithUShortAt(aOffset, arNext) "rWithUShortAt(aOffset); arNext"
#define rWithSShortAt(aOffset, arNext) "rWithSShortAt(aOffset); arNext"
#define rWithUByteAt(aOffset, arNext)  "rWithUByteAt(aOffset);  arNext"
#define rWithSByteAt(aOffset, arNext)  "rWithSByteAt(aOffset);  arNext"
#define rWithConstant(aValue, arNext)  "rWithConstant(aValue);  arNext"
#define rWithSubject(arNext)           "rWithSubject;           arNext"

#define rWithResultOf(aprRoutine, arNext)    "rWithResultOf(aprRoutine);    arNext"
#define rWithResultOfExt(aprRoutine, arNext) "rWithResultOfExt(aprRoutine); arNext"

#define rLetValueBeNull(arNext) "rLetValueBeNull; arNext"

#define rWordAt(aOffset)   "rWithWordAt(aOffset);   rArgument"
#define rUShortAt(aOffset) "rWithUShortAt(aOffset); rArgument"
#define rSShortAt(aOffset) "rWithSShortAt(aOffset); rArgument"
#define rUByteAt(aOffset)  "rWithUByteAt(aOffset);  rArgument"
#define rSByteAt(aOffset)  "rWithSByteAt(aOffset);  rArgument"
#define rConstant(aOffset) "rWithConstant(aOffset); rArgument"

#define rCallResultOf(arNext)         "rCallResultOf;         arNext"
#define rCallExternalResultOf(arNext) "rCallExternalResultOf; arNext"

#define rIf(aprCondition, arNext)    "rIf(aprCondition);    arNext"
#define rIfNot(aprCondition, arNext) "rIfNot(aprCondition); arNext"

#define rWhile(aprCondition, arNext)    "rWhile(aprCondition);    arNext"
#define rWhileNot(aprCondition, arNext) "rWhileNot(aprCondition); arNext"

#define rAdd(arNext)    "rAdd;    arNext"
#define rSub(arNext)    "rSub;    arNext"
#define rLShift(arNext) "rLShift; arNext"
#define rRShift(arNext) "rRShift; arNext"
#define rMul(arNext)    "rMul;    arNext"
#define rAnd(arNext)    "rAnd;    arNext"
#define rOr(arNext)     "rOr;     arNext"
#define rXOr(arNext)    "rXOr;    arNext"

#define rNot(arNext)    "rNot;    arNext"
#define rMinus(arNext)  "rMinus;  arNext"

#define rUpperHalfByteOf(arNext) "rUpperHalfByteOf; arNext"
#define rLowerHalfByteOf(arNext) "rLowerHalfByteOf; arNext"

#define rAddConst(aValue)    "rAdd;    rConstant(aValue)"
#define rSubConst(aValue)    "rSub;    rConstant(aValue)"
#define rLShiftConst(aValue) "rLShift; rConstant(aValue)"
#define rRShiftConst(aValue) "rRShift; rConstant(aValue)"
#define rMulConst(aValue)    "rMul;    rConstant(aValue)"
#define rAndConst(aValue)    "rAnd;    rConstant(aValue)"
#define rOrConst(aValue)     "rOr;     rConstant(aValue)"
#define rXOrConst(aValue)    "rXOr;    rConstant(aValue)"

#define rHalved  "rRShiftConst(1)"
#define rDoubled "rLShiftConst(1)"

#define rForUnitEquipped         "rForResultOfExt(prGetUnitEquipped)"
#define rForUnitEquipped(arNext) "rForResultOfExt(prGetUnitEquipped); arNext"

#define rForActiveUnit         "rForConstant(0x03004E50); rForWordAt(0)"
#define rForActiveUnit(arNext) "rForActiveUnit; arNext"

#define rForItemROMStruct         "rForResultOfExt(prGetItemROMStruct)"
#define rForItemROMStruct(arNext) "rForResultOfExt(prGetItemROMStruct); arNext"

#define rIfSubjectIsNotNull            "rIf(prCheckSubjectNotNull)"
#define rIfSubjectIsNotNull(arNext)    "rIfSubjectIsNotNull; arNext"
#define rIfSubjectIsNull               "rIfNot(prCheckSubjectNotNull)"
#define rIfSubjectIsNull(arNext)       "rIfSubjectIsNull; arNext"

#define rIfUnitHasAttribute(aAttribute)            "rWithConstant(aAttribute); rIf(prCheckUnitAttribute)"
#define rIfUnitHasAttribute(aAttribute, arNext)    "rIfUnitHasAttribute(aAttribute); arNext"
#define rIfUnitHasNotAttribute(aAttribute)         "rWithConstant(aAttribute); rIfNot(prCheckUnitAttribute)"
#define rIfUnitHasNotAttribute(aAttribute, arNext) "rIfUnitHasNotAttribute(aAttribute); arNext"

#define rIfUnitHasGuardAI            "rIf(prCheckUnitGuardAI)"
#define rIfUnitHasGuardAI(arNext)    "rIfUnitHasGuardAI;    arNext"
#define rIfUnitHasNotGuardAI         "rIfNot(prCheckUnitGuardAI)"
#define rIfUnitHasNotGuardAI(arNext) "rIfUnitHasNotGuardAI; arNext"

#define rIfUnitHasStatus(aStatusId)            "rWithConstant(aStatusId); rIf(prCheckUnitStatus)"
#define rIfUnitHasStatus(aStatusId, arNext)    "rIfUnitHasStatus(aStatusId); arNext"
#define rIfUnitHasNotStatus(aStatusId)         "rWithConstant(aStatusId); rIfNot(prCheckUnitStatus)"
#define rIfUnitHasNotStatus(aStatusId, arNext) "rIfUnitHasNotStatus(aStatusId); arNext"

#define rIfUnitHasState(aState)            "rWithConstant(aState); rIf(prCheckUnitState)"
#define rIfUnitHasState(aState, arNext)    "rIfUnitHasState(aState);    arNext"
#define rIfUnitHasNotState(aState)         "rWithConstant(aState); rIfNot(prCheckUnitState)"
#define rIfUnitHasNotState(aState, arNext) "rIfUnitHasNotState(aState); arNext"

#define rIfUnitsAreAllied            "rIf(prCheckUnitsAllied)"
#define rIfUnitsAreAllied(arNext)    "rIfUnitsAreAllied;    arNext"
#define rIfUnitsAreNotAllied         "rIfNot(prCheckUnitsAllied)"
#define rIfUnitsAreNotAllied(arNext) "rIfUnitsAreNotAllied; arNext"

#define rIfUnitHasAllegience(aAllegience)            "rWithConstant(aAllegience); rIf(prCheckUnitAllegience)"
#define rIfUnitHasAllegience(aAllegience, arNext)    "rIfUnitHasAllegience(aAllegience);    arNext"
#define rIfUnitHasNotAllegience(aAllegience)         "rWithConstant(aAllegience); rIfNot(prCheckUnitAllegience)"
#define rIfUnitHasNotAllegience(aAllegience, arNext) "rIfUnitHasNotAllegience(aAllegience); arNext"

#endif // MSG_HELPER_DEFINITIONS_EVENT
