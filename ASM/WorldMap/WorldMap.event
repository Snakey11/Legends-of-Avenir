
#include "ProcDefinitions.event"

ALIGN 4
#include "WorldMap.lyn.event"

ALIGN 4
WorldMapWrapperProc:
PROC_YIELD // Buffer.
PROC_SET_NAME(WorldMapWrapperProcName)
PROC_CALL_ROUTINE(WorldMapWrapperProcBlockMAPTASK) // MAPTASK does things we don't want it to. Let's block it.
PROC_CALL_ROUTINE(WorldMapWrapperProcBlockVBlankHandler) // The VBlank handler does a bunch of stuff we don't want.
PROC_CALL_ROUTINE(0x80311A9)
PROC_CALL_ROUTINE(0x080BA2E5) // Start gProc_WorldMap.
PROC_NEW_CHILD(0x08A3E624) // Start gProc_GMapMuEntry.
PROC_CALL_ROUTINE(0x080B8681) // Start gProc_8A3D700. Seems to be closely tied to displaying faces in WM text?
PROC_YIELD
PROC_CALL_ROUTINE(0x080B8E15) // LoadGMObjGraphics. Draws tiles for location sprites.
PROC_CALL_ROUTINE(WorldMapWrapperProcCallEvents) 
PROC_LOOP_ROUTINE(WorldMapWrapperProcAreEventsFinished)
PROC_END_ALL(0x08A3D748) // End gProc_WorldMap.
PROC_END_ALL(0x08A3EAF0) // End gProc_GmapRMUpdate.
PROC_END_ALL(WorldMapGenericBlocker)
PROC_CALL_ROUTINE(WorldMapResetBg2Offset)
PROC_END
WorldMapWrapperProcName:
String("WorldMapWrapper") ; BYTE 0
// +0x2C is the pointer to our new event engine proc.

ALIGN 4
WorldMapGenericBlocker: // This is a generic blocker proc to halt processes that we don't want to happen.
PROC_SET_NAME(WorldMapGenericBlockerName)
PROC_LOOP_ROUTINE(WorldMapGenericBlockerLoop)
PROC_END
WorldMapGenericBlockerName:
String("WorldMapBlocker") ; BYTE 0

ALIGN 4
NewWMTextTiles:
#incext png2dmp "TextTiles.png" "--lz77"

ALIGN 4
NewWMTextTSA:
#incbin "NewTextBox.dmp"

ALIGN 4
WorldMapTextBoxPaletteData:
#incbin "WorldMapTextBoxPaletteData.dmp"

PUSH
ORG $C2358
SHORT 0x46C0 0x46C0 0x46C0 0x46C0 0x46C0
ORG $C2368 // Prevent world map proc things from clearing BG2 and setting the portrait to blend with BG2 (use BG1 instead).
SHORT 0x46C0 0x46C0 0x46C0 0x46C0 0x46C0 0x46C0 0x46C0 0x46C0 0x46C0 0x46C0 0x46C0 0x46C0 0x46C0 0x46C0

ORG $C1E34 // Have the world map camera updater update BG2 instead of BG1.
BYTE 0x02

ORG $C25D2
SHORT 0x2100 0x2201 

ORG $BFD64
POIN NewWMTextTiles

ORG $BFD6C
POIN NewWMTextTSA

//ORG $BFDD4
//SHORT 0x800C // Make the text box just fade in instead of slide in. See - my insane attempt at changing the slide in in WorlMap.s.
ORG $BFFC4 // This prevents the BG sliding.
WORD 0
//ORG $BFDA0 // This nulls out the routine that fills the HBlank update table with colors. This also breaks the idle drawing.
//SHORT 0x4770
//ORG $C0092
//SHORT 0xE02E
POP

/* Notes on the LARGE world map:
	Many palettes are free!
		Palette 0x0 is consumed by text in the minimug box.
		Palette 0x1 is consumed by the text box that scrolls from the bottom (but the text itself is composed of sprites!).
		Palette 0x4 is consumed by the minimug.
		Palette 0x5 is consumed by the level display.
		Palette 0x7 is consumed by the minimap.
		Palette 0x8 is consumed by the background for the minimug box.
		Palettes 0x9 - 0xC are consumed by the world map itself.
		Palette 0xE is consumed by paths.
		Everything else is free?
		
		Suppose I want to use palette 0x0 for text...
		Since I don't care about a TRAVERSABLE world map, I can consider all palettes except for palettes 0x0 and 0x1 as free (unless I want to display routes).
		This means that I theoretically have 14 palettes to use!
	
	The image for the large world map is at 0xA83364 uncompressed (which kinda surprises me tbh). (Thanks MisakaMikoto for this doc)
	The palette GROUP is at 0xA95FE4 uncompressed.
	The palette MAP is at 0xA96064 compressed.
	The palette map is interesting...
		It is an array with one byte per 2 tiles.
		The lower nibble is the palette (0-3) of the first tile of the doublet.
		Likewise, the upper nibble is the palette (0-3) of the second.
		i.e. 0x03 will indicate that the first tile uses palette 3 and the second tile uses palette 0.
		These are NOT palette BANKS. These are RELATIVE to the starting bank.
		I see no reason why I can't change the function reading this to instead behave like...
			The lower nibble is the static palette ID of the first tile.
			The higher nibble is the static palette ID of the second tile.
*/

/*
ALIGN 4
WorldMapEventTest:
EVBIT_MODIFY 0x1
_0xC220
STAL 32
WM_SHOWDRAWNMAP 0x0 0x0 0x0 0x10 0x0
STAL 2 // This STAL is necessary, or else palettes get borked.
WM_FADEOUT 0x0 0x0 0x0
WM_TEXTDECORATE
EVBIT_MODIFY 0x0
STAL 60
WM_SHOWTEXTWINDOW 0x0 0x28 0x1
WM_WAITFORTEXT
WM_TEXTSTART
WM_TEXT WorldMapTestText
TEXTEND
WM_MOVECAM2 0x0 0x0 0x08 0x0 0x18 0x3C 0x0
STAL 60
//WM_SHOWPORTRAIT EmperorMug 200//700
STAL 6 26
WM_HIGHLIGHT 0x0 CesariaGlowy 0x0
STAL 0x10
TEXTCONT
TEXTEND
WM_SHOWPORTRAIT RexMug 1000
STAL 6 26
TEXTCONT
TEXTEND
WM_HIGHLIGHTCLEAR1 0x0 CesariaGlowy 0x0
WM_HIGHLIGHTCLEAR2 0x0 CesariaGlowy 0x0
WM_CLEARPORTRAIT 0x0 0x100 0x0
STAL 32

WM_REMOVETEXT
STAL 2
FADI 0x10
SKIPWN
SVAL 0xB 1 // Temporary way to tell when events are finished running.
ENDA

EVBIT_MODIFY 0x1
_0xC220
WM_SPAWNLORD 0x0 0x0 0x1 0x0 0x0
WM_CENTERCAMONLORD
MUSCFAST 0x7FFF
STAL 32
MUSC 0x4
//WM_SHOWDRAWNMAP 0x0 0x0 0x0 0x10 0x0
STAL 2
WM_FADEOUT 0x0 0x0 0x0
WM_TEXTDECORATE
EVBIT_MODIFY 0x0
STAL 60
WM_SHOWTEXTWINDOW 0x0 0x28 0x1
WM_WAITFORTEXT
WM_TEXTSTART
WM_TEXT 0x8DB
TEXTEND
WM_MOVECAM2 0x0 0x0 0x18 0x0 0x3C 0x3C 0x0
STAL 60
//WM_SHOWPORTRAIT 0x51 700
STAL 6 26
WM_HIGHLIGHT 0x0 ShizonGlowy 0x0
TEXTCONT
TEXTEND
STAL 30
WM_HIGHLIGHTCLEAR1 0x0 ShizonGlowy 0x0
WM_HIGHLIGHTCLEAR2 0x0 ShizonGlowy 0x0
//WM_CLEARPORTRAIT 0x0 0x100 0x0
STAL 32
WM_MOVECAM2 0x0 0x0 0x18 0x0 0xFFF8 0x3C 0x0
STAL 60
//WM_SHOWPORTRAIT 0x52 700
STAL 6 26
WM_HIGHLIGHT 0x0 0x0 0x0
TEXTCONT
TEXTEND
STAL 30
WM_HIGHLIGHTCLEAR1 0x0 0x0 0x0
WM_HIGHLIGHTCLEAR2 0x0 0x0 0x0
//WM_CLEARPORTRAIT 0x0 0x100 0x0
STAL 32
WM_MOVECAM2 0x0 0x0 0xFFF8 0x0 0x1E 0x3C 0x0
STAL 60
//WM_SHOWPORTRAIT 0x56 1332
STAL 6 26
WM_HIGHLIGHT 0x0 0x2 0x0
TEXTCONT
TEXTEND
STAL 30
WM_HIGHLIGHTCLEAR1 0x0 0x2 0x0
WM_HIGHLIGHTCLEAR2 0x0 0x2 0x0
//WM_CLEARPORTRAIT 0x0 0x200 0x0
STAL 32
WM_MOVECAM2 0x0 0x0 0x1E 0x0 0xFFF8 0x3C 0x0
STAL 60
//WM_SHOWPORTRAIT 0x53 1332
STAL 6 26
WM_HIGHLIGHT 0x0 0x5 0x0
TEXTCONT
TEXTEND
STAL 30
WM_HIGHLIGHTCLEAR1 0x0 0x5 0x0
WM_HIGHLIGHTCLEAR2 0x0 0x5 0x0
//WM_CLEARPORTRAIT 0x0 0x200 0x0
STAL 32
WM_MOVECAM2 0x0 0x0 0xFFF8 0x0 0x30 0x3C 0x0
STAL 60
//WM_SHOWPORTRAIT 0x40 700
STAL 6 26
WM_HIGHLIGHT 0x0 0x1 0x0
TEXTCONT
TEXTEND
STAL 30
WM_HIGHLIGHTCLEAR1 0x0 0x1 0x0
WM_HIGHLIGHTCLEAR2 0x0 0x1 0x0
//WM_CLEARPORTRAIT 0x0 0x100 0x0
STAL 32
TEXTCONT
TEXTEND
STAL 30
WM_MOVECAM2 0x0 0x0 0x30 0x0 0x0 0x3C 0x0
STAL 60
//WM_SHOWPORTRAIT 0x54 700
STAL 6 26
WM_HIGHLIGHT 0x0 0x3 0x0
TEXTCONT
TEXTEND
STAL 30
WM_HIGHLIGHTCLEAR1 0x0 0x3 0x0
WM_HIGHLIGHTCLEAR2 0x0 0x3 0x0
//WM_CLEARPORTRAIT 0x0 0x100 0x0
STAL 32
TEXTCONT
TEXTEND
STAL 30
TEXTCONT
TEXTEND
STAL 30
TEXTCONT
TEXTEND
STAL 30
WM_MOVECAM2 0x0 0x0 0x0 0x0 0x30 0x3C 0x0
STAL 60
//WM_SHOWPORTRAIT 0x40 700
STAL 6 26
WM_HIGHLIGHT 0x0 0x1 0x0
TEXTCONT
TEXTEND
TEXTCONT
TEXTEND
WM_HIGHLIGHTCLEAR1 0x0 0x1 0x0
WM_HIGHLIGHTCLEAR2 0x0 0x1 0x0
//WM_CLEARPORTRAIT 0x0 0x100 0x0
STAL 32
WM_MOVECAM2 0x0 0x0 0x30 0x0 0x18 0x3C 0x0
STAL 60
WM_SHOWPORTRAIT 0x51 700
STAL 6 26
WM_HIGHLIGHT 0x0 0x7 0x0
TEXTCONT
TEXTEND
WM_HIGHLIGHTCLEAR1 0x0 0x7 0x0
WM_HIGHLIGHTCLEAR2 0x0 0x7 0x0
WM_CLEARPORTRAIT 0x0 0x100 0x0
STAL 32
WM_MOVECAM2 0x0 0x0 0x18 0x0 0x28 0x34 0x0
STAL 62
PLACEDOT 0x0 0x14 0x1
PLACEDOT 0x1 0x12 0x1
STAL 60
PUTSPRITE 0x2 0x4E 0x1 0x12
PUTSPRITE 0x3 0x4E 0x1 0x12
PUTSPRITE 0x4 0x4E 0x1 0x12
WM_PUTMOVINGSPRITE 0x0 0x2 0x0 0x73 0x84 0x55 0x41 0xD2 0x3 0xA 0x0
WM_PUTMOVINGSPRITE 0x0 0x3 0x0 0x84 0x84 0x76 0x57 0xAA 0x3 0xA 0x0
WM_PUTMOVINGSPRITE 0x0 0x4 0x0 0x95 0x84 0x86 0x64 0x96 0x3 0xA 0x0
STAL 20
TEXTCONT
TEXTEND
WM_WAITFORSPRITES 0x0 0xFFFF 0xFFFF
REMSPRITE 0x2
REMSPRITE 0x3
REMSPRITE 0x4
STAL 30
WM_SHOWPORTRAIT 0x14 1332
STAL 6 60
PUTSPRITE 0x2 0x1 0x0 0x6
WM_PUTMOVINGSPRITE 0x0 0x2 0x0 0x5C 0x64 0x5C 0x6C 0xB4 0x3 0x10 0x0
TEXTCONT
TEXTEND
WM_WAITFORSPRITES 0x0 0xFFFF 0xFFFF
REMSPRITE 0x2
WM_CLEARPORTRAIT 0x0 0x200 0x0
STAL 46
PUTSPRITE 0x6 0x2 0x0 0x14
PUTSPRITE 0x5 0x73 0x0 0x14
PUTSPRITE 0x2 0xB 0x1 0x12
PUTSPRITE 0x3 0x2A 0x1 0x12
PUTSPRITE 0x4 0x23 0x1 0x12
WM_PUTMOVINGSPRITE 0x0 0x2 0x0 0x84 0x84 0x6C 0x5C 0xD2 0x1 0x0 0x0
WM_PUTMOVINGSPRITE 0x0 0x3 0x0 0x73 0x92 0x5B 0x56 0xD2 0x1 0x0 0x0
WM_PUTMOVINGSPRITE 0x0 0x4 0x0 0x95 0x92 0x7D 0x56 0xD2 0x1 0x0 0x0
TEXTCONT
TEXTEND
WM_WAITFORSPRITES 0x0 0xFFFF 0xFFFF
STAL 26
WM_PUTSPRITE 0x0 0x6 0x0 0x63 0x45
WM_PUTSPRITE 0x0 0x5 0x0 0x6C 0x4C
WM_FADEINSPRITE 0x0 0x6 0x3C
WM_FADEINSPRITE 0x0 0x5 0x3C
TEXTCONT
TEXTEND
WM_WAITFORSPRITELOAD
WM_REMOVETEXT
STAL 2
FADI 16
SKIPWN
WM_FXCLEAR1 0x0 0xFFFF 0xFFFF
WM_FXCLEAR2 0x0 0xFFFF 0xFFFF
REMSPRITE 0x2
REMSPRITE 0x3
REMSPRITE 0x4
REMSPRITE 0x5
REMSPRITE 0x6
SVAL 0xB 1
ENDA
*/