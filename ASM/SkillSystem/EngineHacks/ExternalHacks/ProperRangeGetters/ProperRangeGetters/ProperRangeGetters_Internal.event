#ifndef HAX_PROPER_RANGE_GETTERS_INTERNAL_EVENT
#define HAX_PROPER_RANGE_GETTERS_INTERNAL_EVENT

#ifndef _FE8_
	ERROR Range Display Fix is for FE8
#endif

#include "Extensions/Hack Installation.txt"
#include "EAstdlib.event"

// 43 hooks & 8 rewritten routines

{
PUSH
	ORG 0x016B8C
	_prIsCoveingRangeProxy: // Replacing original routine
		SHORT 0xB570 // push {r4-r6, lr}
		SHORT 0x1C04 // mov r4, r0
		SHORT 0x1C0D // mov r5, r1
		SHORT 0x1C16 // mov r6, r2
		SHORT 0x1C31 // mov r1, r6
		BL(_prMinRangeGetterProxy) // bl Item_GetMinRange
		SHORT 0x42A8 // cmp r0, r5
		SHORT 0xDC07 // bgt ReturnFalse
		SHORT 0x1C20 // mov r0, r4
		SHORT 0x1C31 // mov r1, r6
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0x42A8 // cmp r0, r5
		SHORT 0xDB01 // blt ReturnFalse
		SHORT 0x2001 // mov r0, #1
		SHORT 0xE000 // b End
		SHORT 0x2000 // mov r0, #0 @ ReturnFalse
		SHORT 0xBD70 // pop {r4-r6, pc} @ End
	
	ORG 0x0171FA
		BL(_prMaskFromR6)
	
	ORG 0x017218
		BL(_prMaskFromR6)
	
	ORG 0x018A2A
		BL(_prMaxFromR4)
	
	// 0x01B404 is handled by Range Fix
	
	ORG 0x023A16
		BL(_prMinFromActiveUnit)
	
	ORG 0x023A22
		BL(_prMaxFromActiveUnit)
	
	ORG 0x0251DC
		BL(_prMinFromSubjectUnit)
	
	ORG 0x0251E8
		BL(_prMaxFromSubjectUnit)
	
	ORG 0x025758
		BL(_prMinFromSubjectUnit)
	
	ORG 0x025764
		BL(_prMaxFromSubjectUnit)
	
	ORG 0x02A8C2
		BL(_prIsCoveringRangeFromR5)
	
	ORG 0x0398E8
		BL(_prMaxFromR5)
	
	ORG 0x03AC66
		// We have to be careful here because we don't want to overlap with teqs mov getter hack
		BL(_pr3AC66Hook)
		SHORT 0x46C0 0x46C0 // nop nop
	
	ORG 0x03ACC2
		BL(_prMaxFromR5)
	
	ORG 0x03B558
	// free space: 0x9C
	// routine size: 0x34
		SHORT 0xB5F0 // push {r4-r7, lr}
		SHORT 0x1C04 // mov r4, r0
		SHORT 0x1C0D // mov r5, r1
		BL(0x01A38C) // bl FillMovMapForUnit
		SHORT 0x480C // ldr r0, ppMapRangeRows
		SHORT 0x6800 // ldr r0, [r0]
		SHORT 0x2100 // mov r1, #0
		BL(0x0197E4) // bl ClearMap
		SHORT 0x480B // ldr r0, ppMapSize
		SHORT 0x8847 // ldrh r7, [r0, #2]
		SHORT 0x3F01 // sub r7, #1
		SHORT 0x480A // ldr r0, ppMapSize @ YLoopStart
		SHORT 0x8806 // ldrh r6, [r0]
		SHORT 0x3E01 // sub r6, #1
		SHORT 0x00B9 // lsl r1, r7, #2 @ XLoopStart
		SHORT 0x4807 // ldr r0, ppMapMovCostRows
		SHORT 0x6800 // ldr r0, [r0]
		SHORT 0x5840 // ldr r0, [r0, r1]
		SHORT 0x5D80 // ldrb r0, [r0, r6]
		SHORT 0x2878 // cmp r0, #120
		SHORT 0xD805 // bhi XLoopContinue
		SHORT 0x1C20 // mov r0, r4
		SHORT 0x1C29 // mov r1, r5
		SHORT 0x1C32 // mov r2, r6
		SHORT 0x1C3B // mov r3, r7
		BL(_prFillRangeMapForUnitAndItem)
		SHORT 0x3E01 // sub r6, #1 @ XLoopContinue
		SHORT 0xDAF4 // bge XLoopStart
		SHORT 0x3E01 // sub r7, #1 @ YLoopContinue
		SHORT 0xDAEF // bge YLoopStart
		SHORT 0xBDF0 // pop {r4-r7, pc} @ End
		WORD  0x0202E4E4 // @ ppMapRangeRows
		WORD  0x0202E4E0 // @ ppMapMovCostRows
		WORD  0x0202E4D4 // @ ppMapSize
	
	// free space: 0x68
	// routine size: 0x2C in size
	_prFillRangeMapForUnitAndItem:
		SHORT 0xB5F0 // push {r4-r7, lr}
		SHORT 0x1C04 // mov r4, r0
		SHORT 0x1C0D // mov r5, r1
		SHORT 0x1C16 // mov r6, r2
		SHORT 0x1C1F // mov r7, r3
		SHORT 0x1C28 // mov r0, r5
		SHORT 0x1C21 // mov r1, r4
		BL(_prMinRangeGetterProxy) // bl Item_GetMinRange
		SHORT 0x1C21 // mov r1, r4
		SHORT 0x1C04 // mov r4, r0
		SHORT 0x1C28 // mov r0, r5
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0x1C03 // mov r3, r0
		SHORT 0x1C30 // mov r0, r6
		SHORT 0x1C39 // mov r1, r7
		SHORT 0x1C22 // mov r2, r4
		BL(0x01B9A4) // bl FillRangeMap
		SHORT 0xBDF0 // pop {r4-r7, pc}
		SHORT 0x46C0 // nop
	
	// free space: 0x3C
	_prMinFromActiveUnit:
		SHORT 0xB500
		SHORT 0x4905
		SHORT 0x6809
		BL(_prMinRangeGetterProxy) // bl Item_GetMinRange
		SHORT 0xBD00
	
	_prMaxFromActiveUnit:
		SHORT 0xB500
		SHORT 0x4902
		SHORT 0x6809
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0xBD00
		
		WORD 0x03004E50
	
	_prMinFromSubjectUnit:
		SHORT 0xB500
		SHORT 0x4905
		SHORT 0x6809
		BL(_prMinRangeGetterProxy) // bl Item_GetMinRange
		SHORT 0xBD00
	
	_prMaxFromSubjectUnit:
		SHORT 0xB500
		SHORT 0x4902
		SHORT 0x6809
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0xBD00
		
		WORD 0x02033F3C

	
	ORG 0x03B6CE // I have no idea tbh but it's probably the active unit
		BL(_prMinFromActiveUnit)
	
	ORG 0x03B6DA // I have no idea tbh but it's probably the active unit
		BL(_prMaxFromActiveUnit)
	
	ORG 0x03C182
		BL(_prMaxFromR6)
	
	ORG 0x03D014
		BL(_prMinFromActiveUnit)
	
	ORG 0x03D020
		BL(_prMaxFromActiveUnit)
	
	ORG 0x03D880
		SHORT 0xB5F0 // push {r4-r7, lr}
		SHORT 0x1C04 // mov r4, r0
		SHORT 0x1C0D // mov r5, r1
		SHORT 0x480B // ldr r0, ppRangeMapRows
		SHORT 0x6800 // ldr r0, [r0]
		SHORT 0x2100 // mov r1, #0
		BL(0x0197E4) // bl ClearMap
		SHORT 0x7C26 // ldrb r6, [r4, #0x10]
		SHORT 0x7C67 // ldrb r7, [r4, #0x11]
		SHORT 0x1C28 // mov r0, r5
		SHORT 0x1C21 // mov r1, r4
		BL(_prMinRangeGetterProxy) // bl Item_GetMinRange
		SHORT 0x1C21 // mov r1, r4
		SHORT 0x1C04 // mov r4, r0
		SHORT 0x1C28 // mov r0, r5
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0x1C03 // mov r3, r0
		SHORT 0x1C30 // mov r0, r6
		SHORT 0x1C39 // mov r1, r7
		SHORT 0x1C22 // mov r2, r4
		BL(0x01B9A4) // bl FillRangeMap
		SHORT 0xBDF0 // pop {r4-r7, pc}
		WORD  0x0202E4E4 // @ ppRangeMapRows

	ORG 0x03D950
		BL(_prMinFromActiveUnit)
	
	ORG 0x03D95C
		BL(_prMaxFromActiveUnit)
	
	ORG 0x03E1EC
		SHORT 0xB570 // push {r4-r6, lr}
		SHORT 0x1C14 // mov r4, r2
		SHORT 0x7C22 // ldrb r2, [r4, #0x10]
		SHORT 0x1A13 // sub r3, r2, r0
		SHORT 0xDA00 // bge ABSBranchX
		SHORT 0x1A83 // sub r3, r0, r2
		SHORT 0x7C60 // ldrb r0, [r4, #0x11] @ ABSBranchX
		SHORT 0x1A42 // sub r2, r0, r1
		SHORT 0xDA00 // bge ABSBranchY
		SHORT 0x1A0A // sub r2, r1, r0
		SHORT 0x189D // add r5, r3, r2 @ ABSBranchY
		SHORT 0x1C20 // mov r0, r4
		BL(0x016B28) // bl Unit_GetEquippedWeapon
		SHORT 0x1C06 // mov r6, r0
		SHORT 0xD00C // beq Return0
		SHORT 0x1C21 // mov r1, r4
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0x4285 // cmp r5, r0
		SHORT 0xDC05 // bgt Return50
		SHORT 0x1C30 // mov r0, r6
		SHORT 0x1C21 // mov r1, r4
		BL(_prMinRangeGetterProxy) // bl Item_GetMinRange
		SHORT 0x4285 // cmp r5, r0
		SHORT 0xDA01 // bge Return0
		SHORT 0x2032 // mov r0, #50 @ Return50
		SHORT 0xE000 // b End
		SHORT 0x2000 // mov r0, #0 @ Return0
		SHORT 0xBD70 // pop {r4-r6, pc} @ End

	ORG 0x03E9C0
		BL(_prMinFromActiveUnit)
	
	ORG 0x03E9D2
		BL(_prMaxFromActiveUnit)
	
	ORG 0x03EAF2
		BL(_prMinFromR5)
	
	ORG 0x03EB06
		BL(_prMaxFromR5)
	
	ORG 0x03EF24 // Some AI Stuff
		BL(_prMinFromActiveUnit)
	
	ORG 0x03EF30 // Some AI Stuff
		BL(_prMaxFromActiveUnit)
	
	ORG 0x0412DE // Some Nightmare AI Stuff
		BL(_prMinFromActiveUnit)
	
	ORG 0x0412EA // Some Nightmare AI Stuff
		BL(_prMaxFromActiveUnit)
	
	ORG 0x04145C // Some Nightmare AI Stuff
		BL(_prMinFromActiveUnit)
	
	ORG 0x041468 // Some Nightmare AI Stuff
		BL(_prMaxFromActiveUnit)
	
	ORG 0x04A1F2
		BL(_prMinFromActiveUnit)
	
	ORG 0x04A1FC
		BL(_prMaxFromActiveUnit)
	
	ORG 0x04A212
		BL(_prMinFromActiveUnit)
	
	ORG 0x04A21C
		BL(_prMaxFromActiveUnit)
	
	ORG 0x04A232
		BL(_prMinFromActiveUnit)
	
	ORG 0x04A23E
		BL(_prMaxFromActiveUnit)
	
	ORG 0x04A27A
		BL(_prMinFromSomewhereWeird)
	
	ORG 0x04AF2C
		SHORT 0xB530 // push {r4-r5, lr}
		SHORT 0x1C0C // mov r4, r1
		SHORT 0x1C20 // mov r0, r4
		BL(0x016B28) // bl Unit_GetEquippedWeapon
		SHORT 0x1C05 // mov r5, r0
		SHORT 0xD00A // beq Return1
		SHORT 0x1C21 // mov r1, r4
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0x2801 // cmp r0, #1
		SHORT 0xD005 // beq Return1
		SHORT 0x1C28 // mov r0, r5
		SHORT 0x1C21 // mov r1, r4
		BL(_prMinRangeGetterProxy) // bl Item_GetMinRange
		SHORT 0x2801 // cmp r0, #1
		SHORT 0xDC01 // bgt Return2
		SHORT 0x2001 // mov r0, #1 @ Return1
		SHORT 0xE000 // b End
		SHORT 0x2002 // mov r0, #2 @ Return2
		SHORT 0xBD30 // pop {r4-r5, pc} @ End

	ORG 0x04B012 // No clue
		BL(_prMinFromActiveUnit)
	
	ORG 0x04B02E // No clue
		BL(_prMinFromActiveUnit)
	
	ORG 0x04B03C // No clue
		BL(_prMaxFromActiveUnit)
	
	ORG 0x04D876
		BL(_prMinFromActiveUnit)
	
	ORG 0x04D900
		BL(_prMinFromActiveUnit)
	
	// =======================
	// Range Display Fix Stuff
	// =======================
	
	ORG 0x01ACBC
	// Make Range Map For Unit Reach (Used during movement select/display/etc)
		SHORT 0xB5F0 0x1C04 0x2101 0x4249 0x4B22 0x469E 0xF800 0x1C05 0x2600 0x2700 0x4820 0x8846 0x3E01 0x481F 0x8807 0x3F01 0x00B2 0x481E 0x6800 0x5880 0x5DC0 0x2878 0xD826 0x481C 0x6800 0x5880 0x5DC0 0x2800 0xD120 0x481A 0x6800 0x5880 0x5DC0 0x2800 0xD11A 0x6820 0x6861 0x6A80 0x6A89 0x4308 0x2180 0x4208 0xD00C 0x1C38 0x1C31 0x4B13 0x469E 0xF800 0x2800 0xD005
		
		SHORT 0x1C21 // mov r1, r4
		BL(_prMaskGetterProxy)
		
		SHORT 0x1C02 0x432A 0xE000 0x1C2A 0x1C38 0x1C31 0x4B0F 0x469E 0xF800 0x3F01 0xDACF 0x3E01 0xDACA 0x4905 0x6809 0x4809 0x6001 0xBCF0 0xBC01 0x4700 0x0000 0x71E8 0x0801 0xE4D4 0x0202 0xE4E0 0x0202 0xE4D8 0x0202 0xE4F0 0x0202 0x798C 0x0803 0x70D4 0x0801 0x49A0 0x0300
		
		POIN (_prFillRangeByMask+1)

	_prGetUnitStaffRangeMask:
		SHORT 0xB570 0x2900 0xDB05 0x0049 0x311E 0x5A41 0xF000 0xF814 0xE00F 0x1C04 0x2500 0x2600 0x0069 0x311E 0x5A61 0x2900 0xD006 0x1C20 0xF000 0xF808 0x4306 0x3501 0x2D05 0xDBF3 0x1C30 0xBC70 0xBC02 0x4708 0xB530 0x1C04 0x1C0D 0x4B12 0x469E 0xF800 0x2800 0xD01C 0x1C28 0x4B10 0x469E 0xF800 0x2800 0xD111 0x1C20 0x4B0E 0x469E 0xF800 0x3001 0x2101 0x4081 0x3901 0x1C0C 0x1C28 0x4B0A 0x469E 0xF800 0x2101 0x4081 0x1E48 0x4060 0xE005 0x1C28 0x4B07 0x469E 0xF800 0xE000 0x2000 0xBD30 0x0000 0x8870 0x0802 0x7684 0x0801 0x8A1C 0x0801 0x766C 0x0801 0x70D4 0x0801
		
	ALIGN 4
	_pr3AC66Hook:
		SHORT 0xB500 // push {lr}
		SHORT 0x1C29 // mov r1, r5
		SHORT 0x181D // add r5, r3, r0
		SHORT 0x1C30 // mov r0, r6
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0xBD00 // pop {pc}
		
	_prMaxFromR4:
		SHORT 0xB500 // push {lr}
		SHORT 0x1C21 // mov r1, r4
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0xBD00 // pop {pc}
		
	_prMinFromR5:
		SHORT 0xB500 // push {lr}
		SHORT 0x1C29 // mov r1, r5
		BL(_prMinRangeGetterProxy) // bl Item_GetMinRange
		SHORT 0xBD00 // pop {pc}
		
	_prMaxFromR5:
		SHORT 0xB500 // push {lr}
		SHORT 0x1C29 // mov r1, r5
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0xBD00 // pop {pc}
	
	_prIsCoveringRangeFromR5:
		SHORT 0xB500 // push {lr}
		SHORT 0x1C2A // mov r2, r5
		BL(_prIsCoveingRangeProxy) // bl Item_GetMaxRange
		SHORT 0xBD00 // pop {pc}

	_prMaxFromR6:
		SHORT 0xB500 // push {lr}
		SHORT 0x1C31 // mov r1, r6
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0xBD00 // pop {pc}

	_prMaskFromR6:
		SHORT 0xB500 // push {lr}
		SHORT 0x1C31 // mov r1, r6
		BL(_prMaskGetterProxy) // bl Item_GetMaxRange
		SHORT 0xBD00 // pop {pc}

	_prMinFromSomewhereWeird:
		SHORT 0xB510 // push {r4, lr}
		SHORT 0x1C04 // mov r4, r0
		SHORT 0x490D // ldr r1, =#0x3001818
		SHORT 0x4A0D // ldr r2, =#0x203DD95
		SHORT 0x7810 // ldrb r0, [r2]
		SHORT 0x1840 // add  r0, r1
		SHORT 0x7800 // ldrb r0, [r0]
		BL(0x019430) // bl Unit_GetStruct
		SHORT 0x1C01 // mov r1, r0
		SHORT 0x1C20 // mov r0, r4
		BL(_prMinRangeGetterProxy) // bl Item_GetMinRange
		SHORT 0xBD10 // pop {r4, pc}
		
	_prMaxFromSomewhereWeird:
		SHORT 0xB510 // push {r4, lr}
		SHORT 0x1C04 // mov r4, r0
		SHORT 0x4906 // ldr r1, =#0x3001818
		SHORT 0x4A06 // ldr r2, =#0x203DD95
		SHORT 0x7810 // ldrb r0, [r2]
		SHORT 0x1840 // add  r0, r1
		SHORT 0x7800 // ldrb r0, [r0]
		BL(0x019430) // bl Unit_GetStruct
		SHORT 0x1C01 // mov r1, r0
		SHORT 0x1C20 // mov r0, r4
		BL(_prMaxRangeGetterProxy) // bl Item_GetMaxRange
		SHORT 0xBD10 // pop {r4, pc}
		SHORT 0x0000 // .align
		WORD  0x03001818
		WORD  0x0203DD95
	
	_prMinRangeGetterProxy:
		jumpToHack(prMinRangeGetter)
	
	_prMaxRangeGetterProxy:
		jumpToHack(prMaxRangeGetter)
	
	ORG 0x0170D4
	_prMaskGetterProxy:
	// Get Item Range Mask
		SHORT 0xB570 // push {r4-r6, lr}
		SHORT 0x1C04 // mov r4, r0
		SHORT 0x1C0D // mov r5, r1
		BL(_prMaxRangeGetterProxy)
		SHORT 0x3001 // add r0, #1
		SHORT 0x2101 // mov r1, #1
		SHORT 0x4081 // lsl r1, r0
		SHORT 0x1E4E // sub r6, r1, #1
		SHORT 0x1C20 // mov r0, r4
		SHORT 0x1C29 // mov r1, r5
		BL(_prMinRangeGetterProxy)
		SHORT 0x2101 // mov r1, #1
		SHORT 0x4081 // lsl r1, r0
		SHORT 0x1E48 // sub r0, r1, #1
		SHORT 0x4070 // eor r0, r6
		SHORT 0xBD70 // pop {r4-r6, pc}

	ORG 0x01B460
	// Make Range Map By Unit & Mask (Used in unit menu selection and others (?))
		SHORT 0xB500 0x1C0A 0x7C41 0x7C00 0x4B02 0x469E 0xF800 0xBC01 0x4700 0x46C0
		POIN (_prFillRangeByMask+1)

	_prFillRangeByMask:
		SHORT 0xB5F0 0x0403 0x040C 0x0C1B 0x431C 0x1C15 0x261F 0x2700 0x1C28 0x40F0 0x2101 0x4008 0x42B8 0xD00B 0x1C07 0x4B08 0x469E 0x0420 0x1400 0x1421 0x1C32 0x2301 0x2F00 0xD100 0x425B 0xF800 0x3E01 0xDAEB 0xBCF0 0xBC01 0x4700 0x0000 0xAABC 0x0801

	ORG 0x01723C
		replaceWithHack((_prGetUnitStaffRangeMask+1))
POP
}

#endif // HAX_PROPER_RANGE_GETTERS_INTERNAL_EVENT
