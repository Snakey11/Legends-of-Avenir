RAM:

$02025042 - $0202504A: used to store promotion options for a character
wait actually this changes...

$0202BCFE: Chapter number

$0202BD04 - Byte of Hard/Normal/Easy mode
$0202BD0B - Eirika/Ephraim mode

$0202BE4C - Character data in memory

$0203A4EC - Attacker's data
$0203A56C - Defender's data

$0203A55F - $0203A56B: Some unused bytes here

$0203A4F0 - Ptr. to unit's class data

$0203A541 - Terrain of attacker
$0203A534 - Attacker's equipped weapon

$0203A53C - Type of weapon equipped by attacker
$0203A5BC - and by defender

$0203A53F - Attacker's extra hit from WTA
$0203A540 - Attacker's extra MT from WTA

$0203A81C: Storage

$0202BE6B - Weapon uses left(all weapons) - source for the below
$0203A50B - Uses left of equipped wep
$0203A535 - ""
$0203A537 - ""


ASM routines:

0xCA0: Given r0= % chance, return a weighted coin result.

0x005514 - 0x005520: Given r0=portrait number, returns r0=pointer to that portrait in portrait array.

0x7854 - 0x7934: (portrait related stuff in conversations)

$08010FAE: For dropped item, finds item icon to display

$08011044: For dropped items, finds type of text to display?
$08011132: For dropped items, finds type of text to display?

$08011524: For dropped item, stores its IID/durability to $030005F4
$08011538: Adds dropped item to the slayer's inventory at full uses.

$0801618C - Item acquisition routine that loads:
$080161B0 - Big pointer table that determines if an obtained item is "got a/an ____" or just "got ____" (for uniques)
Only for items with IDs 0x3C-B9; all others always use "got a/an ____"

$0803292C - After a unit has died, check if that unit had the 'last item droppable' flag set, that it has something in its inventory, and that the unit's killer is a player unit; if so, select the unit's last item in inventory to be dropped.
    -After finding last item in inventory, checks if item isn't a bag of Gold (IIDs 0x9B-A0,0xB8-B9)
    $080115BC: If it is a Gold item, adds its value directly to the party's gold count at $$0202BCF8 instead of adding the item to the slayer's inventory

0x0162B8 - 0x0162F2: Given r0=ptr to character data in ram, returns portrait number of either char or class, depending on whether they have a generic portrait.

0x15380 - 0x15384: Loads byte inside 0202BCB1.

0x163F0 - 0x1641C: Given r0 = weapon, load HP stat bonus
0x16420 - 0x1644C: Given weapon, load Str bonus.
0x16450 - 0x1647C: Given weapon, load Skl bonus.
0x16480 - 0x164AC: Given weapon, load Spd bonus.
0x164B0 - 0x164DC: Given weapon, load Lck bonus.
0x164E0 - 0x1650C: Given weapon, load Def bonus.
0x16510 - 0x1653C: Given weapon, load Res bonus.
0x16540 - 0x1656C: Given weapon, return FF if indestructible, durability otherwise.
0x16574 - 0x1674C: Check if weapon can be equipped
0x16750 - 0x167A0: Something about weapons
0x167A4 - 0x167FC: Determines if staff can be equipped

0x16AEC - : Given item, subtract 1 from durability if not indestructible, and return 0 if the weapon broke.

0x16B28 - 0x16B56: Get equipped weapon
0x16B58 - 0x16B88: Given r0=char(RAM), test items for weapon?
0x16B8C - 0x16BBC: Grabs unit's weapon's range and checks it to see if it can target/counter
0x16BC0 - 0x16BEA:
0x16BEC - 0x16C86: Given item and pointer to defender, return 0 if not effective and 1 if effective.
0x16C88 - 0x16CBE:- Returns 1 if Slayer effective and 0 otherwise.

0x16D5C - 0x16D92: Given weapon rank, return weapon level that symbolizes.


0x16DB8 - where it determines what weapon rank (or 'PRF') to display
		0x16DD8: value ANDed with weapon ability bytes to determine if PRF can be displayed

0x16EC8 - 0x16EE0: Given item, return flag if it's a dancer ring.
0x16EE4 - 0x16F78: Return 1 if character would potentially be able to use this.
->16F50: Hardcoded lockpick
->16F58: Rings

0x174EC - Strips all but lowest two bytes in r0; used to isolate equipped weapon

0x17548 - GIven r0=item, returns r0=weapon type (swd/lanc/axe) of unit
	Stores at $0203A53C

0x1756C - 0x1757C: returns weapon abilities 1-4 of attacker

0x1760C - 0x1761C: Given r0=weapon, return weight.

0x17724 - 0x17734: Given r0=weapon, return weapon effect.
0x1773C - 0x1774C: Return "staff/use effect".
0x17754 - 0x17764: Return cost per use of staff.
0x1776C - 0x17790: return cost * durability(=FF if indestructible).
0x17798 - 0x177AA: Given item data in r0, return weapon experience.
0x177B0 - 0x177BC: Given r0=item, return pointer in item table.

0x17984: Refresh character's item table using some 3-RAM.

0x179D8 - 0x179F6: Given r0=char (RAM), return number of items they have.

0x17E34 - : Loads units into RAM slots

0x181C8 - 0x1829A: Given r0=char (RAM), set max health to be 0x78 if enemy and 0x3C if player. Sets to max if exceeded for str...luk, con, mov<=15.
0x1829C - 0x182D4: Given r0=character number (in table), load r0=pointer to character in RAM.

0x189B8 - 0x18A18: Given r0 = char(RAM), return aid.

0x18A58 - 0x18A7A: Given r0=character pointer (in RAM), return whether character knows any magic.

0x18AF0 - 0x18B24: Given bitmask of abilities, return 81 if mounted, 82 = dragon, 83 = peg (icons) or -1 if none. 

0x19150 - 0x1918C: Calculates HP (complicated; HP bar?)
0x19190 - 0x191AC: Calculates HP
0x191B0 - 0x191CC: Calculates Str
0x191D0 - 0x1920C: Calculates Skl
0x19210 - 0x1924C: Calculates Spd
0x19250 - 0x1926C: Calculates Def
0x19270 - 0x19294: Calculates Res
0x19298 - 0x192B4: Calculates Luk
0x192B8 - 0x192F2: Return 46 if 4A is portrait on Ch22; otherwise return portrait number
0x192F4 - 0x1933E: Given r0=char(RAM), seems to return mini portrait.
0x19340 - 0x1935C: Return something iff not a player character.
0x19360 - 0x19364: Store something to the 0x38th byte
0x19368 - 0x193A2: (hp related)
0x193A4 - 0x193E4: (hp related)
0x193E8 - 0x1940E: Given r0=char (RAM), return name of person being rescued?
0x19414 - 0x1942A: Given r0=char(RAM), do text for status.
0x19430 - 0x1943C: Given r0=character number (in RAM), load r0=pointer to character in RAM.
0x19444 - 0x19460: Given r0=class number, load r0=pointer to class in table.
0x19464 - 0x19480: Given r0=character number, load r0=pointer to character in table.
0x19484 - 0x19498: (items related)

0x20FAC - Chapter start; reads some values in Chapter data bytes 41-42

0x22FDC - 0x2301E: Check if Seize command shows

0x230F0: Check if Dance shows.
->23128: Check for rings

0x236F4: checks if Equip command shows?

0x23752: Checks for "unsellable"

0x23F64 - 0x23FB4: Checks whether "Supply" command appears in unit menu

0x24B1C - 0x24B52: Checks if item can be used as an dancer ring.
-> 24B32: "Ring" type

0x25B18 - 0x25B66: Check if can r0 use dance on r1
0x25B6C:

0x281C8 - 0x281DA: Given r0=character (RAM), return number of people they can support with.

0x281DC: Given r0=character(RAM), r1=support slot number, return supporter number?

0x2823C - 0x28260: Given r0=character (RAM), r1=support slot, returns 3=A,2=B,1=C,0=None for support level
0x28264 - 0x2828C: Given r0=character (RAM), return number of support levels they already have.

0x286BC - 0x286D0: Given r0=char (RAM), Return 79+Affinity.
0x286D4 - 0x286EA: Given r0=char number, return 79+Affinity.
0x286EC - 0x28708: Load ?th byte in IRAM?



0x29504- 0x29518: Return 1 iff 8th byte of r0 is >9 (unused for ross promo?!)

0x2A20C: Possibly main attacking routine?

0x2A584 - 0x2A65E: Given r0=0203-buffer ptr and r1=RAM ptr, store adjusted stats into buffer-ptr.

0x2A668 - 0x2A69E: Given r0=0203-buffer ptr and r1=RAM ptr, store raw stats into buffer.

0x2A6DC - 0x2A72A: Loads up terrain bonuses; Defence first; r1 contains terrain type unit sits upon;
		should look for how it gets that, but it is probably within this routine itself

0x2A852 - WTA finder, weapon ability do-er; checking for Magic Damage

0x2A95C: calculates stats and incorporates bonuses?

0x2AA88 - Gets unit's defence (or resistance as appropriate?)

0x2AABC - Weapon + WTA bonus

0x2AAEC - Where Slayer bonus is applied

0x2AB08 - Where weapon effectiveness is applied
	0x2AB1A - Where Sacred Twins are sorted out - they only get double power for effectiveness

0x2AB62 - If wielding Stone, set damage to 0

0x2AB74 - 0x2ABA8: Given r0=attacker and r1=weapon, store attack speed into 0203A54A

0x2ABAC: part of WTA formula; if attacker has WTA?
	0x175F4 - Grabs weapon hit of attacker
		$0203A534 - equipped weapon of attacker - $36 for during combat

0x2ABB8 - Part of hit formula

0x2ABE4 - 0x2AC14: Given r0=attacker, store avoid in 0203a54e

0x2AD54 - 0x2AD8E: Incorporates S-rank bonus into stats stored in RAM; applied after Weapon triangle and effectiveness
0x2AD90 - 0x2ADCA: Incorporates Dancer Ring bonuses.

0x2AF90 - 0x2B016: Given r0,r1 stack pointers, return 1 if someone can double, and stores stuff.
0x2B018 - 0x2B076: Given r0, r1 stack pointers, return 0 if weapon broke, if 2B080 returned something less than 0, hmm...
0x2B080 - 0x2B090: Given stack pointers, return 2^{2b094's result}
0x2B094: Given stack pointers, check if weapon is brave weapon. if so, do stuff. if not, return 0.

0x2B50 - Adds promotion gains to current stats, checking against caps

0x2B600 - 0x2B82C: Attacking routine

0x2B83C - runs battle routine

0x2B92C: Experience gain (attacking)

0x2B9A0 - 0x2B9C2: Given a number r0, return int(r0/100) + (1 with (r0%100) chance)

0x2B9F4 - Possibly checks to see if you can gain xp? (not an enemy, etc).

0x2BA28 - 0x2BBFC: Check for leveling up, does level up.

0x2BD50 - 0x2BE9E: Given r0= RAM, r1=new class, Adds promotion gains.
0x2BEA0: Given r0="attacker" (i.e. new franz) and r1="defender" (i.e. old franz), store changed stats in the 0x12 bytes before Defender. (HP,...,con)

0x2C028:

0x2C0B4 - 0x2C1AE: r0 = "Attacker" ptr. Return -1 if not a player, health=0, hard/normal/easy byte contain 0x80, or some other check. Otherwise return new weapon rank of character.

0x2C1B0 - :

0x2C1EC - : update stats, weapon ranks, items, after battle

0x2C540 - Checks to see if you aren't dead

0x2C5B8 - 0x2C636: Experience gain - note getting staff exp is dependent on "staff" ability, not type
->2C622: Hardcoded 20 points for using dancer ring
0x2C638: Experience pts for using staff?

0x2C6A0 - 0x2C6E0: Experience gain for dancing

0x2C76C - 0x2C7BC: Considers reaver weapons.
0x2C7C0 - 0x2C842: WTA calcs

0x2C844 - Other weird stuff

	0x2C868;loads attacker/defender ptr together

0x2F664: Promotion

0x30CC0 - 0x30CF0: Unknown switch statement

0x31594 - 0x315CA: Stores item into storage, or stores back to character and returns -1 if full.

0x3161C - 0x3165C: Returns 0 if chapter is <=1 or you're in "lords split" or 5x.

0x320EE: Series of different routines?

0x32164:
0x321E0:
0x32270: 840C4 the coordinates of the active character.
0x3229C:
0x32344:
0x32358:
0x323A8:
0x323D4:
0x3247C:
0x32554:
0x32580:

0x33258 - 0x332C8: Return current leader. (for autocursor and status screen)

0x3666C - 0x3669E: This check determines whether x2 shows up on double attacking screen.

0x3673A: This check determines whether eirika's weapon flashes on attack menu
0x367D6: Determines whether enemy's weapon flashes

0x55BB4 - 0x55BC0: Do 56FF8 and save the last byte of r0.
0x55BC4 - 0x55BD0: Do 56FF8 and save the last byte of r0. (why do we need two of these?)


0x56FF8: GIANT animation routine...

0x5769C(typoed): Presumably determines whether eirika's weapon flashes on battle animation
0x5798C: Presumably determines whether enemy's weapon flashes on animation screen

0x58848 - 0x58916: Given r0=attacker or defender, r1 = animation pointer, r2 = weapon used, r3= pointer in 3007xxx (hmm), store the animation code into that pointer, and return (animation code - 1), or 0xFFFF if no animation.

0x7AD1C - 0x7AFCC: Summoning

0x84800 - 0x84856: Given r0=character number, returns r0=1 if character is forced for the chapter and 0 else.

0x86E00 - 0x86E40: Displays non-Str/Mag text

0x86FAC - 0x870A0: Something to do with affinities?

0x87184 - 0x87478: Displays character stats of character page
0x87484 - 0x8767A: Something to do with displaying items, has special cases for Gorgon Eggs
0x87698 - 0x8777E: Displays supports
0x87788 - 0x8783A: Displaying weapon rank things
0x8784C - 0x878CA: Routine with coordinates for displaying weapon ranks and supports on character page.

0x889A0 - 0x889F6: Chooses initial place to load R-text in char menus

0x89088 - 0x8914A: Some sort of master routine for determining moving through R-menus; some main loop

0x89354: Used for not displaying support R-text, Stores a 40 somewhere for some purpose (causes "Lance mastery level" to re-scroll)
0x89384: Stores an 80 somewhere for some purpose

0x98014 - 0x98046: Given item, return storage tab

0x9E85C - 0x9E96E: Store stuff from inventory to supply

0xA2CB0 - : Load thing in 203E88E

0xA2D28 - 0xA2DA4: ??

0xA3870 - 0xA3896: Some switch 0/1 statement

0xA487C: Do something if affinity nonzero?

0xA4CFC - : Given r0=char number, return some ram ptr if affinity nonzero.

0xBB5B0: Given r0, load 4th byte of r0*32+0x2060B0 if Eirika, and 5th byte if Ephraim.

0xCC6D4 - 0xCC900: Trainee promotion code

0xCCCA4 - 0xCCCDC: Checks if super trainees unlocked

0xCCD48 - 0xCCF5C: loads options and menu for promotion
$C9004: Suspect data for opening roll?

0xCD7FC - 0xCD888: Text loading for trainee promotion
0xCD898 - 0xCD8F2: Text loading part 2
0xCD8F8 - 0xCD952: Text loading part 3
0xCD958 - 0xCD9B2: Text loading part 4
0xCD9B8 - 0xCDA24: Text loading part 5

0xCDD38 - 0xCDD76: Checks to see if third menu option shows up



Arrays:
0x15D488 - 0x1609BC(?): Text table ("08" pointer tip reads compressed, "88" pointer tip reads uncompressed)

0x2060B0 - 0x206450: World map locations

0x206674 - 0x2067F4: Path connections

0x206FE4 - 0x207038: Pointer and TSA table for intro text :D
pointer, tsa, time(halfword), filler zeroes.

0x207044 - 0x207050: Trainee promotion data

0x20707C - 0x2070B8: Text IDs for trainee promotions

0x59A598 - 0x59A5D0: Text IDs for statuses
0x59A5D0 - 0x59A6D0: Pointers to character data in RAM
0x59A7D0 - 0x59A8A0: Pointers to enemy data in RAM
(nearby: npc and faction 4?)

0x803D64 - 0x807130: Character data table

0x807164 - 0x809B10: Class data table
0x809B10 - 0x80B808: Item data table
0x80B808 - 0x80C47C: Movement costs

0x8ACBC4 - 0x8ADEB0: Portrait data array
0x8ADEB0 - ?: Effectiveness lists

0x8B0890 - 0x8B363C?: Chapter data table

0x95DD1C - 0x95DFA4: Pointer table for backgrounds
0x95DFA4 - 0x95E0A4: Promotion branches table

0x9EC6BC - 0x9ECD4C: Boss quote table (includes triangles)
0x9ECD4C - 0x9ED10C: Death quote table
0x9ED10C - 0x9ED64C: Support availability table
0x9ED64C - 0x9ED674: Characters forced
0x9ED674 - 0x9ED67C: Dead appearing map sprites?

0xA00B38 - 0xA00D14: R-Menu for Character stats page
0xA00D14 - 0xA00EB8: R-Menu for Items page
0xA00EB8 - 0xA00FD0: R-Menu for Weapon ranks/supports page

0xA01CC0: R-Menu for status screen

0xA188C0: Table for storage tabs

0xA3CD68 - 0xA3D1A8: Endings array
0xA3D1A8 - 0xA3D1B0: pointers to two halves of ending array?
0xA3D1B0 - 0xA3D2C0: Ending titles
0xA3D2C0 - 0xA3D348: Death endings array

0xC00000 - 0xC01930: Animation table

Free space:

0xB2A610 - 0xC00000
0xC01930 - 0xC02000 (useful for animation table though)
0xE47180 - 0xEE0000
0xEF2F20 - 0xEF8000
0xEF86D0 - 0xEF9000
0xEFB2E0 - 0xFE0000
0xFE0740 - 0xFE1000
0xFE2840 - 0xFE3000
0xFE3090 - 0xFE4000
0xFE4000 - 0xFFF000
0xFFFF00 - 0xFFFFFF

Data:

0x2064BC - 0x206674: Path data

Graphics:

0x5926F4-0x5996F4: Item Graphics (Note: 595EF4 = Weapon Types, 5963F4 = affinities, 596774 = mounts)
0x5996F4-0x599734: Item Palettes (index 1 = Weapon Icon palette)
0x599734-0x599F34: Soldier minimugs
 
0x8F120C - 0x8F5B08(?!): Castle hall background
0x8F5AF4: TSA for castle hall
0x8F60A8 - 0x8F6128: Palettes

0x91526C - : Background: 
0x919B70 - :

0x9A18F4: Congratulations!

0x9A1E70: Map Clear!

0x9ADD4C: <!> symbol

0x9ADEB0: Poisoned animation
0x9AE204: poison palette

0x9B03D4: flame icons
0x9B068C: flame palette

0xA03368: Class card graphics
0xA05F10: Class card TSA (vertically flip all tiles)
0xA06460: Class card palette

0xA19CCC: Weapon types (includes a gold icon?!)
0xA1A084: Palette

0xAA1280: Mini Magvel
0xAA188C: Palette
0xAA1970: Skirmish!

0xAA1FE0: Suspicious tables

0xAA239C: Palette for intro text
0xAA23BC: In an era long past...
0xAA31B4: Page 2 of intro
0xAA3AE4: The Sacred Stones
0xAA3D7C: Page 4 of intro
AA435C: Page 5
AA5344: Page 6
AA5954: But this peace would not last
mysterious pointer tables exist in the middle of this...
AA7760: Background
0xB12DB4: Stone background for "Sacred Stones"

0xB18ED4 - 0xB18F34: Palette for intro background

Some palettes:


0xAAB414: Dragons of intro screen
0xAAC2A4: TSA for dragons
0xAAC5AC: Fire Emblem logo
0xAACEDC: Sacred Stones ribbon +"Press Start"+ Copyright
0xAADC08: Dragons' shadow
0xAAE61C: TSA for dragons' shadow

0xAE04F4 - 0xAE0A48: Garcia's head (not portrait...)
0xAE0A48 - 0xAE0D74: Garcia's silhouette
0xAE0D74 - 0xAE0D94: Garcia's palette
0xAE0D94: Ross's head


0xC02000: Ephraim battle animation
0xE47180: End of animations
